{"ast":null,"code":"var _jsxFileName = \"/Users/jpek/Downloads/01-starting-project 6/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      console.log('Name is invalid');\n    }\n  }, [enteredNameIsValid]);\n\n  const nameInputChangeHandler = e => {\n    setEnteredName(e.target.value);\n\n    if (enteree.target.valuedName.trim() !== '') {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  const nameInputBlurHandler = e => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n    }\n  };\n\n  const formSubmissionHandler = e => {\n    e.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue); // nameInputRef.current.value(''); //NOT IDEAL, DON'T MANIPULATE THE DOM DIRECTLY\n\n    setEnteredName('');\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"NpBdDjtGXxwhrEFo1Ma3zaY+Jak=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useRef","useState","useEffect","SimpleInput","props","nameInputRef","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","console","log","nameInputChangeHandler","e","target","value","enteree","valuedName","trim","nameInputBlurHandler","formSubmissionHandler","preventDefault","enteredValue","current","nameInputIsInvalid","nameInputClasses"],"sources":["/Users/jpek/Downloads/01-starting-project 6/src/components/SimpleInput.js"],"sourcesContent":["import { useRef, useState, useEffect } from 'react';\n\nconst SimpleInput = props => {\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      console.log('Name is invalid');\n    }\n  }, [enteredNameIsValid]);\n\n  const nameInputChangeHandler = e => {\n    setEnteredName(e.target.value);\n\n    if (enteree.target.valuedName.trim() !== '') {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  const nameInputBlurHandler = e => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n    }\n  };\n\n  const formSubmissionHandler = e => {\n    e.preventDefault();\n\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    console.log(enteredName);\n\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue);\n\n    // nameInputRef.current.value(''); //NOT IDEAL, DON'T MANIPULATE THE DOM DIRECTLY\n    setEnteredName('');\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  const nameInputClasses = nameInputIsInvalid\n    ? 'form-control invalid'\n    : 'form-control';\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input\n          ref={nameInputRef}\n          type='text'\n          id='name'\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className='error-text'>Name must not be empty.</p>\n        )}\n      </div>\n      <div className='form-actions'>\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,SAA3B,QAA4C,OAA5C;;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;EAAA;;EAC3B,MAAMC,YAAY,GAAGL,MAAM,EAA3B;EACA,MAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACO,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC,KAAD,CAA5D;EACA,MAAM,CAACS,kBAAD,EAAqBC,qBAArB,IAA8CV,QAAQ,CAAC,KAAD,CAA5D;EAEAC,SAAS,CAAC,MAAM;IACd,IAAIM,kBAAJ,EAAwB;MACtBI,OAAO,CAACC,GAAR,CAAY,iBAAZ;IACD;EACF,CAJQ,EAIN,CAACL,kBAAD,CAJM,CAAT;;EAMA,MAAMM,sBAAsB,GAAGC,CAAC,IAAI;IAClCR,cAAc,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;;IAEA,IAAIC,OAAO,CAACF,MAAR,CAAeG,UAAf,CAA0BC,IAA1B,OAAqC,EAAzC,EAA6C;MAC3CX,qBAAqB,CAAC,IAAD,CAArB;IACD;EACF,CAND;;EAQA,MAAMY,oBAAoB,GAAGN,CAAC,IAAI;IAChCJ,qBAAqB,CAAC,IAAD,CAArB;;IAEA,IAAIL,WAAW,CAACc,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BX,qBAAqB,CAAC,KAAD,CAArB;IACD;EACF,CAND;;EAQA,MAAMa,qBAAqB,GAAGP,CAAC,IAAI;IACjCA,CAAC,CAACQ,cAAF;IAEAZ,qBAAqB,CAAC,IAAD,CAArB;;IAEA,IAAIL,WAAW,CAACc,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BX,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD;;IAEDG,OAAO,CAACC,GAAR,CAAYP,WAAZ;IAEA,MAAMkB,YAAY,GAAGnB,YAAY,CAACoB,OAAb,CAAqBR,KAA1C;IACAL,OAAO,CAACC,GAAR,CAAYW,YAAZ,EAbiC,CAejC;;IACAjB,cAAc,CAAC,EAAD,CAAd;EACD,CAjBD;;EAmBA,MAAMmB,kBAAkB,GAAG,CAAClB,kBAAD,IAAuBE,kBAAlD;EAEA,MAAMiB,gBAAgB,GAAGD,kBAAkB,GACvC,sBADuC,GAEvC,cAFJ;EAIA,oBACE;IAAM,QAAQ,EAAEJ,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEK,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,GAAG,EAAEtB,YADP;QAEE,IAAI,EAAC,MAFP;QAGE,EAAE,EAAC,MAHL;QAIE,QAAQ,EAAES,sBAJZ;QAKE,MAAM,EAAEO,oBALV;QAME,KAAK,EAAEf;MANT;QAAA;QAAA;QAAA;MAAA,QAFF,EAUGoB,kBAAkB,iBACjB;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAXJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAeE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAfF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD,CA1ED;;GAAMvB,W;;KAAAA,W;AA4EN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}